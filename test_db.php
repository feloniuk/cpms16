<?php
// ะขะตัั ะฟะพะดะบะปััะตะฝะธั ะบ ะฑะฐะทะต ะดะฐะฝะฝัั ะธ ัะพะทะดะฐะฝะธะต ัะตััะพะฒัั ะดะฐะฝะฝัั

require_once __DIR__ . '/core/Database.php';
require_once __DIR__ . '/core/repositories/BranchRepository.php';
require_once __DIR__ . '/core/repositories/AdminRepository.php';

try {
    echo "๐ ะขะตัััะฒะฐะฝะฝั ะฟัะดะบะปััะตะฝะฝั ะดะพ ะฑะฐะทะธ ะดะฐะฝะธั...\n";
    
    // ะขะตัั ะฟะพะดะบะปััะตะฝะธั
    $db = Database::getInstance();
    echo "โ ะัะดะบะปััะตะฝะฝั ะดะพ ะะ ััะฟััะฝะต!\n\n";
    
    // ะกะพะทะดะฐะฝะธะต ัะตะฟะพะทะธัะพัะธะตะฒ
    $branchRepo = new BranchRepository();
    $adminRepo = new AdminRepository();
    
    echo "๐ ะะตัะตะฒััะบะฐ ััััะบัััะธ ัะฐะฑะปะธัั...\n";
    
    // ะัะพะฒะตัะบะฐ ัะฐะฑะปะธั
    $tables = [
        'branches' => 'ะคัะปัั',
        'admins' => 'ะะดะผัะฝััััะฐัะพัะธ', 
        'repair_requests' => 'ะะฐัะฒะบะธ ะฝะฐ ัะตะผะพะฝั',
        'cartridge_replacements' => 'ะะฐะผัะฝะธ ะบะฐัััะธะดะถัะฒ',
        'room_inventory' => 'ะะฝะฒะตะฝัะฐั ะบะฐะฑัะฝะตััะฒ',
        'inventory_templates' => 'ะจะฐะฑะปะพะฝะธ ัะฝะฒะตะฝัะฐัั',
        'api_tokens' => 'API ัะพะบะตะฝะธ',
        'user_states' => 'ะกัะฐะฝะธ ะบะพัะธัััะฒะฐััะฒ'
    ];
    
    foreach ($tables as $table => $description) {
        $stmt = $db->query("SHOW TABLES LIKE '$table'");
        if ($stmt->fetch()) {
            echo "โ ะขะฐะฑะปะธัั '$table' ($description) ััะฝัั\n";
        } else {
            echo "โ ะขะฐะฑะปะธัั '$table' ($description) ะะ ััะฝัั!\n";
        }
    }
    
    echo "\n๐ ะกัะฒะพัะตะฝะฝั ัะตััะพะฒะธั ะดะฐะฝะธั...\n";
    
    // ะกะพะทะดะฐะฝะธะต ัะตััะพะฒัั ัะธะปะธะฐะปะพะฒ
    $testBranches = [
        'ะฆะตะฝััะฐะปัะฝะธะน ะพััั',
        'ะคัะปัั โ1 (ะะธัะฒ)',
        'ะคัะปัั โ2 (ะัะฒัะฒ)', 
        'ะกะบะปะฐะด'
    ];
    
    foreach ($testBranches as $branchName) {
        if (!$branchRepo->findByName($branchName)) {
            $branchId = $branchRepo->create([
                'name' => $branchName,
                'is_active' => 1
            ]);
            echo "โ ะกัะฒะพัะตะฝะพ ััะปัั: $branchName (ID: $branchId)\n";
        } else {
            echo "โน๏ธ ะคัะปัั '$branchName' ะฒะถะต ััะฝัั\n";
        }
    }
    
    // ะกะพะทะดะฐะฝะธะต API ัะพะบะตะฝะฐ ะดะปั ะฑะพัะฐ
    $stmt = $db->prepare("SELECT COUNT(*) as count FROM api_tokens WHERE name = 'Telegram Bot'");
    $stmt->execute();
    $result = $stmt->fetch();
    
    if ($result['count'] == 0) {
        $botToken = bin2hex(random_bytes(32));
        $stmt = $db->prepare("INSERT INTO api_tokens (name, token, permissions, is_active) VALUES (?, ?, ?, 1)");
        $stmt->execute(['Telegram Bot', $botToken, json_encode(['user', 'admin'])]);
        echo "โ ะกัะฒะพัะตะฝะพ API ัะพะบะตะฝ ะดะปั ะฑะพัะฐ: $botToken\n";
        echo "๐ ะะพะดะฐะนัะต ัะตะน ัะพะบะตะฝ ะดะพ ะบะพะฝััะณััะฐััั API\n";
    } else {
        echo "โน๏ธ API ัะพะบะตะฝ ะดะปั ะฑะพัะฐ ะฒะถะต ััะฝัั\n";
    }
    
    // ะกะพะทะดะฐะฝะธะต ัะตััะพะฒัั ัะฐะฑะปะพะฝะพะฒ ะธะฝะฒะตะฝัะฐัั
    $testTemplates = [
        ['name' => 'ะะพะผะฟ\'ััะตั ััะฐะฝะดะฐััะฝะธะน', 'equipment_type' => 'ะะพะผะฟ\'ััะตั', 'brand' => '', 'model' => '', 'requires_serial' => 1, 'requires_inventory' => 1],
        ['name' => 'ะะพะฝััะพั ััะฐะฝะดะฐััะฝะธะน', 'equipment_type' => 'ะะพะฝััะพั', 'brand' => '', 'model' => '', 'requires_serial' => 1, 'requires_inventory' => 1],
        ['name' => 'ะัะธะฝัะตั HP LaserJet', 'equipment_type' => 'ะัะธะฝัะตั', 'brand' => 'HP', 'model' => 'LaserJet', 'requires_serial' => 1, 'requires_inventory' => 1],
        ['name' => 'ะะปะฐะฒัะฐัััะฐ', 'equipment_type' => 'ะะปะฐะฒัะฐัััะฐ', 'brand' => '', 'model' => '', 'requires_serial' => 0, 'requires_inventory' => 1],
        ['name' => 'ะะธัะฐ', 'equipment_type' => 'ะะธัะฐ', 'brand' => '', 'model' => '', 'requires_serial' => 0, 'requires_inventory' => 1]
    ];
    
    foreach ($testTemplates as $template) {
        $stmt = $db->prepare("SELECT COUNT(*) as count FROM inventory_templates WHERE name = ?");
        $stmt->execute([$template['name']]);
        $result = $stmt->fetch();
        
        if ($result['count'] == 0) {
            $stmt = $db->prepare("INSERT INTO inventory_templates (name, equipment_type, brand, model, requires_serial, requires_inventory) VALUES (?, ?, ?, ?, ?, ?)");
            $stmt->execute([
                $template['name'],
                $template['equipment_type'],
                $template['brand'],
                $template['model'],
                $template['requires_serial'],
                $template['requires_inventory']
            ]);
            echo "โ ะกัะฒะพัะตะฝะพ ัะฐะฑะปะพะฝ: {$template['name']}\n";
        } else {
            echo "โน๏ธ ะจะฐะฑะปะพะฝ '{$template['name']}' ะฒะถะต ััะฝัั\n";
        }
    }
    
    echo "\n๐ ะกัะฐัะธััะธะบะฐ:\n";
    echo "ะคัะปัั: " . $branchRepo->count() . "\n";
    echo "ะะดะผัะฝััััะฐัะพัะธ: " . $adminRepo->count() . "\n";
    
    $stmt = $db->query("SELECT COUNT(*) as count FROM inventory_templates");
    $result = $stmt->fetch();
    echo "ะจะฐะฑะปะพะฝะธ ัะฝะฒะตะฝัะฐัั: " . $result['count'] . "\n";
    
    $stmt = $db->query("SELECT COUNT(*) as count FROM api_tokens");
    $result = $stmt->fetch();
    echo "API ัะพะบะตะฝะธ: " . $result['count'] . "\n";
    
    echo "\nโ ะขะตัั ะทะฐะฒะตััะตะฝะพ ััะฟััะฝะพ!\n";
    echo "\n๐ ะะฐัััะฟะฝั ะบัะพะบะธ:\n";
    echo "1. ะกัะฒะพัััั Telegram ะฑะพัะฐ ัะตัะตะท @BotFather\n";
    echo "2. ะะพะดะฐะนัะต ัะพะบะตะฝ ะฑะพัะฐ ะดะพ config/telegram.php\n";
    echo "3. ะะพะดะฐะนัะต ัะฒัะน Telegram ID ัะบ ะฐะดะผัะฝััััะฐัะพัะฐ:\n";
    echo "   INSERT INTO admins (telegram_id, name) VALUES (YOUR_TELEGRAM_ID, 'ะะฐัะต ัะผ\'ั');\n";
    echo "4. ะะฐะปะฐัััะนัะต webhook ะดะปั ะฑะพัะฐ\n";
    
} catch (Exception $e) {
    echo "โ ะะพะผะธะปะบะฐ: " . $e->getMessage() . "\n";
    echo "Trace: " . $e->getTraceAsString() . "\n";
}
?>